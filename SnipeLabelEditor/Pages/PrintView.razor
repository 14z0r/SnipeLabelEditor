@page "/printview/{LabelId:int}"
@inject LabelsDBContext DbContext
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Resources> Localizer

<div class="container">
    <div class="row">
        <div class="col">
            <div class="input-group mb-3">
                <span class="input-group-text">@Localizer["assetId"]</span>
                <input class="form-control" @bind="_assetId"/>
            </div>
        </div>
        <div class="col">
            <button class="btn btn-success" @onclick="RerenderLabel">@Localizer["apply"]</button>
            <button class="btn btn-primary" @onclick="Edit">@Localizer["edit"]</button>
        </div>
    </div>
    <hr/>
   @if (string.IsNullOrEmpty(_pdfDataUrl))
   {
       <Loading DisplayText="@Localizer["generatePdf"]"></Loading>
       RerenderLabel();
   }
   else
   {
       <div style="display: flex; justify-content: center;">
           <div id="PrintDiv" style="display: inline-block; width: 100%">
               <embed type="application/pdf" src="@_pdfDataUrl" style="width: 100%; height: @((_label.HeightMm + 30) + "mm"); overflow: hidden"/>
           </div>
       </div>
   }
    <div class="row">
        <AssetSelector @ref="_assetSelector" IsVisible="false"></AssetSelector>
    </div>
</div>

@code {
    [Parameter]
    public int LabelId { get; set; }

    private Label _label = new Label();

    private AssetSelector? _assetSelector;

    private int _assetId = 0;
    
    string _pdfDataUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (LabelId > 0)
        {
            var label = DbContext.Labels.FirstOrDefaultAsync(x => x.Id == LabelId).Result;
            if (label is not null)
            {
                _label = label;

                await RerenderLabel();
                
                return;
            }
        }
        
        ToastService.ShowError(Localizer["labelNotExist"]);
    }

    private async Task RerenderLabel()
    {
        if (_assetSelector != null && _assetId > 0)
        {
            await _assetSelector.SetAsset(_assetId);
        }
        
        RenderPdf();
    }

    private void RenderPdf()
    {
        _pdfDataUrl = HtmlConverterImagePDF.RenderLabelPDF(_label.HTML, _label.HeightMm, _label.WidthMm, _assetSelector?.JsonFields);
    }

    private void Edit()
    {
        NavigationManager.NavigateTo("labeleditor/" + LabelId);
    }
}