@page "/labeleditor"
@page "/labeleditor/{LabelId:int}"
@inject LabelsDBContext dbContext
@inject IStringLocalizer<Resources> Localizer

<div class="container mt-3">
    <div class="row">
        <div class="col">
            <div class="input-group mb-3">
                <span class="input-group-text">@Localizer["name"]</span>
                <input class="form-control" @bind-value="_label.Name"/>
            </div>
        </div>
        <div class="col">
            <div class="input-group mb-3">
                <span class="input-group-text">@Localizer["format"]</span>
                <select class="form-select" @bind="SelectedFormat">
                    @foreach (var item in _formatoptions)
                    {
                        if (_formatoptions.IndexOf(item) == 0)
                        {
                            <option value="@item" selected>@item</option>
                        }
                        else
                        {
                            <option value="@item">@item</option>
                        }
                    }
                </select>
                <select class="form-select" @bind="_selectedUnit" @onselectionchange="RerenderLabel">
                    @foreach (var item in _unitoptions)
                    {
                        if (_formatoptions.IndexOf(item) == 0)
                        {
                            <option value="@item" selected>@item</option>
                        }
                        else
                        {
                            <option value="@item">@item</option>
                        }
                    }
                </select>
            </div>
        </div>
        <div class="col">
            <button class="btn btn-success" @onclick="SaveLabel">@Localizer["save"]</button>
        </div>
    </div>
    <hr />
    <div class="row">
        @switch (_selectedUnit)
            {
                case "mm":
                    <div class="col">
                        <div class="input-group mb-3">
                            <span class="input-group-text">@Localizer["height"]</span>
                            <input class="form-control" @bind-value="_label.HeightMm"/>
                            <span class="input-group-text">mm</span>
                        </div>
                    </div>
                    <div class="col">
                        <div class="input-group mb-3">
                            <span class="input-group-text">@Localizer["width"]</span>
                            <input class="form-control" @bind-value="_label.WidthMm"/>
                            <span class="input-group-text">mm</span>
                        </div>
                    </div>
                break;
                case "pixel":
                    <div class="col">
                        <div class="input-group mb-3">
                            <span class="input-group-text">@Localizer["height"]</span>
                            <input class="form-control" @bind-value="_label.HeightPx"/>
                            <span class="input-group-text">px</span>
                        </div>
                    </div>
                    <div class="col">
                        <div class="input-group mb-3">
                            <span class="input-group-text">@Localizer["width"]</span>
                            <input class="form-control" @bind-value="_label.WidthPx"/>
                            <span class="input-group-text">px</span>
                        </div>
                    </div>
                break;
            }
            <div class="col">
                <button class="btn btn-primary" @onclick="RerenderLabel">@Localizer["reloadLabel"]</button>
            </div>
    </div>
    <hr/>
    <div class="row">
         @switch (_selectedFormat)
        {
            case "PDF":
                <div class="col">
                    @if (string.IsNullOrEmpty(_pdfDataUrl))
                    {
                        <Loading DisplayText="@Localizer["generatePdf"]"></Loading>
                    }
                    else
                    {
                        <div style="display: flex; justify-content: center;">
                            <div id="PrintDiv" style="display: inline-block; width: 100%">
                                <embed type="application/pdf" src="@(_pdfDataUrl + "#toolbar=1")" style="width: 100%; height: @((_label.HeightMm + 30) + "mm"); overflow: hidden"/>
                            </div>
                        </div>
                    }
                </div>
            break;
            case "PNG":
                <div class="col">
                    @if (string.IsNullOrEmpty(_pdfDataUrl))
                    {
                        <Loading DisplayText="@Localizer["generateImage"]"></Loading>
                    }
                    else
                    {
                        <div style="display: flex; justify-content: center">
                            <div id="PrintDiv" style="border-style: dotted; display: inline-block;">
                                <img id="labelimage" src="@_imageDataUrl"/>
                            </div>
                        </div>
                    }
                </div>
            break;
        }
    </div>
    <hr />
    <div class="row">
        <div class="col-8">
            <div class="mt-2">
                <StandaloneCodeEditor @ref="_editor" CssClass="monaco-editor-container" ConstructionOptions="EditorConstructionOptions" OnDidChangeModelContent="RerenderLabel" OnDidInit="RerenderLabel" />
            </div>
        </div>
        <div class="col-4">
            <div class="row">
                <div class="col">
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["assetId"]</span>
                        <input class="form-control" @bind="_assetId"/>
                    </div>
                </div>
                <div class="col">
                    <button class="btn btn-success" @onclick="RerenderLabel">@Localizer["apply"]</button>
                </div>
            </div>
            <div class="row">
                <AssetSelector @ref="_assetSelector"/>
            </div>
        </div>
    </div>
</div>

<style>
    .monaco-editor-container {
        height: 700px;
        border: 1px solid gray;
    }
</style>

@code {
    [Parameter]
    public int LabelId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (LabelId > 0)
        {
            var label = await dbContext.Labels.FirstOrDefaultAsync(x => x.Id == LabelId);
            if (label is not null)
            {
                _label = label;
            }
        }
    }

    private AssetSelector _assetSelector = null!;
    private StandaloneCodeEditor _editor = null!;

    private Label _label = new Label()
    {
        HTML = "<div style=\"width: 200px; height: 80px\">\n\n</div>",
        HeightMm = 50,
        WidthMm = 50,
    };
    
    string _imageDataUrl = string.Empty;
    string _pdfDataUrl = string.Empty;
    string _pdfBaseString = string.Empty;
    private int _assetId = 0;

    private readonly List<string> _formatoptions = new List<string> { "PDF", "PNG" };
    private string _selectedFormat = "PDF";
    private string SelectedFormat
    {
        get => _selectedFormat;
        set
        {
            _selectedFormat = value;
            RerenderLabel();
        }
    }

    private readonly List<string> _unitoptions = new List<string>() { "mm", "pixel" };
    private string _selectedUnit = "mm";

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "html",
            GlyphMargin = true,
            Value = _label.HTML
        };
    }

    private void CalcPxFromMm()
    {
        if (_label.WidthMm > 0)
        {
            _label.WidthPx = Convert.ToInt32(PxMmConverter.MmToPx(_label.WidthMm));
        }

        if (_label.HeightMm > 0)
        {
            _label.HeightPx = Convert.ToInt32(PxMmConverter.MmToPx(_label.HeightMm));
        }
    }

    private void CalcMmFromPx()
    {
        if (_label.WidthPx > 0)
        {
            _label.WidthMm = Convert.ToInt32(PxMmConverter.PxToMm(_label.WidthPx));
        }

        if (_label.HeightPx > 0)
        {
            _label.HeightMm = Convert.ToInt32(PxMmConverter.PxToMm(_label.HeightPx));
        }
    }

    private async Task RerenderLabel()
    {
        if (_assetSelector != null && _assetId > 0)
        {
            await _assetSelector.SetAsset(_assetId);
        }
        
        switch (_selectedUnit)
        {
            case "mm":
                CalcPxFromMm();
                break;
            case "pixel":
                CalcMmFromPx();
                break;
        }
        
        switch (_selectedFormat)
        {
            case "PDF":
                await RenderPDF();
                break;
            case "PNG":
                await RenderImage();
                break;
        }
    }

    private async Task RenderImage()
    {
        string html = await _editor.GetValue();
        _imageDataUrl = HtmlConverterImagePDF.RenderLabel(html, _label.HeightPx, _label.WidthPx,_assetSelector.JsonFields);
    }

    private async Task RenderPDF()
    {
        string html = await _editor.GetValue();
        _pdfDataUrl = HtmlConverterImagePDF.RenderLabelPDF(html, _label.HeightMm, _label.WidthMm, _assetSelector.JsonFields, out _pdfBaseString);
    }

    private async Task SaveLabel()
    {
        _label.HTML = await _editor.GetValue();

        _label.ImageBaseString = HtmlConverterImagePDF.RenderLabel(_label.HTML, _label.HeightPx, _label.WidthPx, null);

        switch (_selectedUnit)
        {
            case "mm":
                CalcPxFromMm();
                break;
            case "pixel":
                CalcMmFromPx();
                break;
        }
        
        if (dbContext.Labels.FirstOrDefault(x => x.Id == _label.Id) != null)
        {
            dbContext.Labels.Update(_label);
        }
        else
        {
            dbContext.Labels.Add(_label);
        }

        await dbContext.SaveChangesAsync();
    }
}
