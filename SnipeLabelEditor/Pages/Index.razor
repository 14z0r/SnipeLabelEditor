@page "/"
@inject LabelsDBContext DbContext
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IStringLocalizer<Resources> Localizer

<PageTitle>@Localizer["welcome"]</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-4">
            <div class="input-group">
                <input class="form-control" @bind="_searchInName" placeholder="@Localizer["searchInName"]"/>
                <button class="btn btn-outline-primary" @onclick="LoadLabels">
                    <span class="oi oi-magnifying-glass"></span>
                </button>
            </div>
        </div>
        <div class="col">
             <button class="btn btn-outline-primary" @onclick="LoadLabels">
                <span class="oi oi-reload"></span>
            </button>
            <button @onclick="ImportLabel" class="btn btn-success">@Localizer["importLabels"]</button>
            <button @onclick="DownloadFileFromStream" class="btn btn-primary">@Localizer["exportLabels"]</button>
        </div>
    </div>
    
    <table class="table">
        <thead>
        <tr>
            <th></th>
            <th>@Localizer["name"]</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in _labels)
        {
            <tr>
                <td><input class="form-check-input" type="checkbox" @onchange="() => AddRemoveLabelForExport(item)"/></td>
                <td>@item.Name</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => Preview(item)">@Localizer["preview"]</button>
                    <button class="btn btn-primary" @onclick="() => Open(item.Id)">@Localizer["open"]</button>
                    <button class="btn btn-primary" @onclick="() => Edit(item.Id)">@Localizer["edit"]</button>
                    <button class="btn btn-primary" @onclick="() => CopyAndEdit(item.Id)">@Localizer["copyAndEdit"]</button>
                    <button class="btn btn-danger" @onclick="() => RequestDeleteLabel(item)">@Localizer["delete"]</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadLabels();
    }
    
    private List<Label> _labels;

    private List<Label> _labelsForExport = new List<Label>();

    private string _searchInName = "";
    private async Task LoadLabels()
    {
        if (string.IsNullOrEmpty(_searchInName))
        {
            _labels = await DbContext.Labels.ToListAsync();
        }
        else
        {
            _labels = await DbContext.Labels.Where(x => x.Name.ToLower().Contains(_searchInName.ToLower())).ToListAsync();
        }
    }
    
    private async Task Preview(Label label)
    {
        var deleteLabel = Modal.Show<LabelPreview>(label.Name, new ModalParameters() { { nameof(LabelPreview.Label), label } });
        
        var result = await deleteLabel.Result;

        if (result.Confirmed)
        {
            _labels = await DbContext.Labels.ToListAsync();
        }
    }
    
    private void Open(int id)
    {
        NavigationManager.NavigateTo($"printview/" + id);
    }
    
    private void Edit(int id)
    {
        NavigationManager.NavigateTo("labeleditor/" + id);
    }
    
    private void CopyAndEdit(int id)
    {
        NavigationManager.NavigateTo("labeleditor/copyandedit/" + id);
    }

    private void AddRemoveLabelForExport(Label label)
    {
        if (_labelsForExport.Contains(label))
        {
            _labelsForExport.Remove(label);
        }
        else
        {
            _labelsForExport.Add(label);
        }
    }

    private Stream GetFileStream()
    {
        string data = ImportExportLabels.ExportLabels(_labelsForExport);
        var ms = new MemoryStream();
        TextWriter tw = new StreamWriter(ms);
        tw.Write(data);
        tw.Flush();
        ms.Position = 0;
        return ms;
    }

    private async Task DownloadFileFromStream()
    {
        if (_labelsForExport.Count > 0)
        {
            var fileStream = GetFileStream();
            var fileName = "data.json";

            using var streamRef = new DotNetStreamReference(stream: fileStream);

            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
    }

    private async Task RequestDeleteLabel(Label label)
    {
        var deleteLabel = Modal.Show<DeleteLabel>(label.Name, new ModalParameters() { { nameof(DeleteLabel.Label), label } });
        var result = await deleteLabel.Result;

        if (result.Confirmed)
        {
            _labels = await DbContext.Labels.ToListAsync();
        }
    }
    
    private async Task ImportLabel()
    {
        var importLabel = Modal.Show<ImportLabel>(Localizer["importLabels"]);
        var result = await importLabel.Result;

        if (result.Confirmed)
        {
            _labels = await DbContext.Labels.ToListAsync();
        }
    }
}